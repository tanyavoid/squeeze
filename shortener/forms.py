from django import forms

from .models import Link
from .validators import (
    validate_url,
    validate_domain,
    validate_code,
)


class LinkModelForm(forms.ModelForm):
    source = forms.CharField(
        label='What to squeeze',
        widget=forms.Textarea(attrs={'rows': 4, 'class': 'select-text'}),
        error_messages={
            'required': 'You definitely to put something here!',
        },
    )
    code = forms.CharField(
        required=False,
        help_text='The code will be autogenerated if you leave it empty.',
    )

    name = forms.CharField(
        required=False,
        help_text='You can leave it empty or add a meaningful name.',
    )

    class Meta:
        model = Link
        fields = ['source', 'name', 'code']

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user')
        super().__init__(*args, **kwargs)

    def clean_code(self):
        code = self.cleaned_data['code']
        if 'code' in self.changed_data:
            if code.strip():
                code = code.replace(' ', '-')
                validate_code(code)

            if Link.objects.filter(code__exact=code).exists():
                msg = 'Oh, this code is taken. Try another.'
                raise forms.ValidationError(msg)
        return code

    def clean_source(self):
        source = validate_url(self.cleaned_data['source'])
        if 'source' in self.changed_data:
            qs = Link.objects.filter(source__exact=source, owner=self.user)
            if qs.exists():
                code = qs.first().code
                msg = f'Hey, you already have this one! It’s code is “{code}”'
                raise forms.ValidationError(msg)
        return source


class LinkForm(forms.Form):
    source = forms.CharField(
        label='',
        validators=[validate_domain],
        error_messages={
            'required': 'Put something in here!',
        },
        widget=forms.URLInput(
            attrs={
                'placeholder': 'The long one goes here',
            }
        ),
    )

    def clean_source(self):
        return validate_url(self.cleaned_data['source'])
